import React, { useState, useEffect, useCallback } from "react";
import Request from "./Request";
import { v4 as uuidv4 } from "uuid";

import { clickObserver } from "./Submissions";

import requestFeeder from '../Solution/scheduler';

export default function Requests() {
  const [requestNumber, setRequestNumber] = useState(1);
  const [countOfRandomRequests, setCountOfRandomRequests] = useState(0);

  useEffect(() => {
    if (requestNumber >= 1) {
      setRequestList((prevList) => [
        { requestNumber, key: uuidv4() },
        ...prevList
      ]);
    }
  }, [requestNumber]);

  const [requestList, setRequestList] = useState([]);

  const sendRequests = useCallback(
    function () {
      requestFeeder(requestList);
    },
    [requestList]
  );

  useEffect(() => {
    let submitObserver = clickObserver.subscribe({
      next: sendRequests
    });

    return () => submitObserver.unsubscribe();
  }, [sendRequests]);

  function addRequestField(events) {
    setRequestNumber((prevReqNo) => prevReqNo + 1);
  }

  function setRequestDat(travelPlans) {
    setRequestList(reqList => {
      let targetReqIndex = reqList.findIndex(x => x.key === travelPlans.key);
      reqList[targetReqIndex].src = travelPlans.src;
      reqList[targetReqIndex].dest = travelPlans.dest;
      return [...reqList];
    })
  }

  function removeRequestField(requestNumber) {
    setRequestList(
      (prevList) =>
        (prevList.length > 1 &&
          prevList.filter((x) => x.requestNumber !== requestNumber)) ||
        prevList
    );
  }

  function resetRequestNumberCounter() {
    setRequestList((x) => {
      let resetRequestList = [...x];
      resetRequestList.forEach((y, i) => (y.requestNumber = x.length - i));

      return resetRequestList;
    });
  }

  function randomRequestGenerator(e) {
    e.persist();

    setRequestList((requestList) => {
      let autoGeneratedRequestList = [];
      let localCount = countOfRandomRequests;
      while (localCount--) {
        // console.log("[TRACK]", localCount);
        autoGeneratedRequestList.push({
          requestNumber: requestNumber + 1 + localCount,
          key: uuidv4(),
          src: Math.round(Math.random() * 10000, 0),
          dest: Math.round(Math.random() * 10000, 0)
        });
      }

      return autoGeneratedRequestList.concat(requestList);
    });
  }

  return (
    <>
      <div className="requestControl">
        <div>
          <button onClick={resetRequestNumberCounter}>
            Reset Request Counter
          </button>
          <button
            onClick={() => setRequestList([{ requestNumber: 1, key: uuidv4() }])}
          >
            Reset Requests
          </button>
        </div>
        <div>
          <label htmlFor="reqGenCount">Enter count of random requests: </label>
          <input
            placeholder="How many Requests?"
            value={countOfRandomRequests}
            name="reqGenCount"
            onChange={(e) => {
              setCountOfRandomRequests(
                e.target.value > 0 ? parseInt(e.target.value, 10) : 0
              );
            }}
          />
          <button onClick={randomRequestGenerator}>
            Generate Random Requests
          </button>
        </div>
      </div>
      {requestList.map(
        (x) =>
          x.requestNumber && (
            <Request
              addRequestField={addRequestField}
              removeRequestField={removeRequestField}
              setRequestDat={setRequestDat}
              {...x}
              id={x.key}
            />
          )
      )}
    </>
  );
}
